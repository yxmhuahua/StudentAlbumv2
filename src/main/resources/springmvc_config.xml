<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">
    <!--SpringMVC的配置文件，包含网站跳转逻辑的控制，配置-->
    <!--扫描逻辑组件-->
       <context:component-scan base-package="com.alice" use-default-filters="false">
        <!--只扫描控制器 也就是加了controller注解的-->
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!--配置视图解析器，方便页面返回,在控制器处理结束并返回模型和视图名之后，
    Spring 会依次调用 Spring 容器中所注册的视图解析器，来查找符合条件的视图-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/views/"></property>
        <property name="suffix" value=".jsp"></property>
    </bean>



    <!--标准配置1.<mvc:default-servlet-handler/>
    作用：将springmvc不能处理的请求交给tomcat，实现动态静态资源都能访问成功-->
    <!--解析：Spring MVC 将接收到的所有请求都看作是一个普通的请求，包括对于静态资源的请求。这样以来，
    所有对于静态资源的请求都会被看作是一个普通的后台控制器请求，导致请求找不到而报 404 异常错误。查看 tomcat 的日志会报一个警告；
    在springMVC-servlet.xml中配置<mvc:default-servlet-handler />后，会在Spring MVC上下文中定义一个
    org.springframework.web.servlet.resource.DefaultServletHttpRequestHandler，它会像一个检查员，
    对进入DispatcherServlet的URL进行筛查，如果发现是静态资源的请求，就将该请求转由Web应用服务器默认的Servlet也就是DefaultServlet处理-->

   <!-- DefaultServlet处理过程：因此在默认的情况下，默认servlet在webapp启动时被装载，目录列表不可用，日志调试功能被关掉。
    当访问的资源在工程的web.xml中没有Servlet映射时，我们如何加载资源的呢？
    答：其实这就是一个io操作，DefaultServlet先根据客户端的访问路径，获取资源路径，
    然后找到服务器上资源绝对路径，再判断是否存在，如果不存在，则返回404或做其他处理，如果存在，则进行一个io读取操作返回给客户端。-->
    <!--如果不是静态资源的请求，才由DispatcherServlet继续处理。Spring MVC 在全局配置文件中提供了一个<mvc:default-servlet-handler/>标签。
    在 WEB 容器启动的时候会在上下文中定义一个 DefaultServletHttpRequestHandler，
    它会对DispatcherServlet的请求进行处理，如果该请求已经作了映射，那么会接着交给后台对应的处理程序，
    如果没有作映射，就交给 WEB 应用服务器默认的 Servlet 处理，从而找到对应的静态资源，只有再找不到资源时才会报错。
    一般 WEB 应用服务器默认的 Servlet 都是 default。如果默认 Servlet 用不同名称自定义配置，
    或者在缺省 Servlet 名称未知的情况下使用了不同的 Servlet 容器，则必须使用default-servlet-name="XXX"显式提供默认 Servlet 的名称。-->
    <mvc:default-servlet-handler/>


    <!-- 标准配置2.<mvc:annotation-driven/>
    作用：支持一些springmvc更高级的一些功能：JSR303校验，快捷的ajax，映射动态请求-->
    <!--解析：当配置了mvc:annotation-driven/后，Spring就知道了我们启用注解驱动。然后Spring通过context:component-scan/标签的配置，
    会自动为我们将扫描到的@Component，@Controller，@Service，@Repository等注解标记的组件注册到工厂中，来处理我们的请求。
    为我们注册三个bean，分别是RequestMappingHandlerMapping,RequestMappingHandlerAdapter,ExceptionHandler,
    使得我们的@RequestMapping,@RequestParam,@ExceptionHandler这些注解生效，在之前这些都得手动配置才行。
    也就是告知Spring，我们启用注解驱动。然后Spring会自动为我们注册上面说到的几个Bean到工厂中，来处理我们的请求。-->
    <!-- 也就是说如果在web.xml中servlet-mapping的url-pattern设置的是/，而不是如.do。表示将所有的文件，包含静态资源文件都交给spring mvc处理。
     就需要用到<mvc:annotation-driven />了。如果不加，DispatcherServlet则无法区分请求是资源文件还是mvc的注解，而导致controller的请求报404错误。-->
    <mvc:annotation-driven />
    <!--会默认装配好一个LocalValidatorFactoryBean,
    通过在处理方法的入参上标注@valid注解即可让Spring MVC在完成数据绑定后执行数据校验的工作。-->
<!--    <mvc:annotation-driven>-->
<!--        <mvc:message-converters>-->
<!--            <bean class="org.springframework.http.converter.StringHttpMessageConverter"/>-->
<!--            <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"/>-->
<!--        </mvc:message-converters>-->
<!--    </mvc:annotation-driven>-->

    <mvc:annotation-driven />


<!--
    <mvc:annotation-driven validator="validator">
    </mvc:annotation-driven>
    &lt;!&ndash; 配置校验器 &ndash;&gt;
    <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
        &lt;!&ndash; 校验器，使用Hibernate校验器 &ndash;&gt;
        <property name="providerClass" value="org.hibernate.validator.HibernateValidator"/>
        &lt;!&ndash; 指定校验使用的资源文件，在文件中配置校验错误信息，如果不指定则默认使用classpath下面的ValidationMessages.properties文件， &ndash;&gt;
   &lt;!&ndash;     <property name="validationMessageSource" ref="messageSource"/>&ndash;&gt;
    </bean>-->





</beans>